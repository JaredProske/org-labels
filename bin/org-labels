#!/usr/bin/env node

var program = require('commander')
var co      = require('co')
var request = require('request-promise')
var readln  = require('readline')
var semver  = require('semver')
var Promise = require('bluebird')
var _ghauth = require('ghauth')
var moment  = require('moment')

var Labeler = require('..')
var version = require('../package.json').version

var ghauth  = Promise.promisify(_ghauth)

program._name = 'org-labels'

program
  .version(version)
  .usage('<command>')
  .option('-d, --destructive', 'allow standardize to remove labels that are not found in the config file')
  .option('-u --api-url <url>', 'set your github api url prefix', undefined, 'https://api.github.com')
  .option('-a --auth-token <authToken>', 'set a personal access token to authenticate with')
  .option('-o --org', 'force specifying an organization rather than a user (github enterprise has conflicts without specifying this)')

program
  .command('add <org> <label> <color>')
  .description(' - adds a label to all repos in an organization')
  .action(function() {
    co_labels('add', arguments)
  })

program
  .command('remove <org> <label>')
  .description(' - removes a label from all repos in an organization')
  .action(function() {
    co_labels('remove', arguments)
  })

program
  .command('update <org> <label> <color>')
  .description(' - updates an existing label for all repos in an organization')
  .action(function() {
    co_labels('update', arguments)
  })

program
  .command('rename <org> <label> <new>')
  .description(' - renames an existing label for all repos in an organization')
  .action(function() {
    co_labels('rename', arguments)
  })

program
  .command('standardize <org> <repo>')
  .description(' - reads a config/github_labels.json file from a repo and updates labels accordingly')
  .action(function() {
    co_labels('standardize', arguments)
  })

program.parse(process.argv)

if (!program.args.length) program.help()

function co_labels(fn, args) {
  co(_org_labels(fn, args))
    .then(process.exit)
    .catch(function (err) {
      if (err.options && err.options.uri) {
        console.log('Error: %s - %s', err.statusCode, err.options.uri)
      } else {
        console.log(err.stack)
      }
      process.exit()
    })
}

function* _org_labels(fn, args) {
  yield* check_version()

  var auth;

  if (program.authToken) {
    auth = {
      token: program.authToken,
    }
  } else {
    auth = yield ghauth({
      authURL: program.apiUrl + '/authorizations'
      , configName: 'org-labels'
      , userAgent: 'org-labels'
      , note: 'org-labels CLI tool'
      , scopes: []
    })
  }

  yield check_github_ratelimit(auth)

  var org_labels = new Labeler(program, auth)

  yield* org_labels[fn](args)
}

/*
 * Checks org-label's package version against the latest on npm.
 * Prompts for user input if there is a newer version.
 */
function* check_version() {
  var res = yield request({
    uri: 'https://registry.npmjs.org/org-labels/latest'
    , json: true
  }).catch(function (err) {
    console.log('Error checking for update:', err.message)
  })

  if (!res) return // meh

  var rl = readln.createInterface({
    input: process.stdin
    , output: process.stdout
  })
  var confirm = Promise.promisify(rl.question)

  if (semver.gt(res.version, version)) {
    console.log('A newer version of org-labels is available. Please update.')
    console.log('To install the latest org-labels type `[sudo] npm install -g org-labels`')
    var result = yield confirm('Continue without updating? [Y/n] ')
    if ('string' == typeof result && /n|no/i.test(result)) process.exit()
  }

  rl.close()
}

/*
 * checks GitHub's rate-limit to see if we can make enough requests.
 */
function* check_github_ratelimit(auth) {
  try {
    var res = yield request({
      uri: program.apiUrl + '/rate_limit'
      , json: true
      , auth: { user: auth.token, pass: 'x-oauth-basic' }
      , headers: { 'User-Agent': 'org-labels' }
    })

    var limit = res.resources

    if (limit.core.remaining < 90) {
      console.log('GitHub rate-limit remaining is too low.')
      console.log('Please try again %s. Bailing.', moment(limit.core.reset * 1000).fromNow())
      process.exit()
    }

    console.log('GitHub rate limit remaining: %s', limit.core.remaining)
  } catch (e) {
    if (e.statusCode === 404) {
      console.log('GitHub rate limiting disabled.');
    } else {
      console.log('Error getting rate-limit: ' + e.statusCode + ' - ' + e.message);
    }
  }
}
